/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.recorddb.server;


import com.recorddb.server.comands.*;

import java.util.Scanner;
import java.util.concurrent.*;

public class App {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        while(true){

            //Extracting input into array of Strings
            String input = sc.nextLine().trim();
            String[] parts = input.split(" ");

            //EXIT condition -> prints and clears memory
            if (parts[0].equalsIgnoreCase(Constants.STOP)) {
                System.out.println("Adios!");
                Services.clearMemory();
                break;
            }
            if (parts[0].equalsIgnoreCase(Constants.PURGE_AND_STOP)) {
                System.out.println("PURGED, Adios!");
                Services.clearMemory();
                break;
            }
            try{
                //Callable interface, it selects which command to execute based on input
                Callable<String> command = switch (parts[0].toUpperCase()) {
                    case Constants.INSERT_ONE -> {
                          yield  new InsertOne(input);
                    }
                    case Constants.INSERT_MANY -> {
                        yield new InsertMany(input);
                    }
                    case Constants.DELETE -> {
                        yield  new Delete(input);
                    }
                    case Constants.FIND -> {
                        yield  new Find(input);
                    }
                    default -> new InvalidCommand();
                };

                //Applying executor service with 5 threads and making them all daemon thread
                ExecutorService executorService = Executors.newFixedThreadPool(5,
                        r -> {
                            Thread t = Executors.defaultThreadFactory().newThread(r);
                            t.setDaemon(true);
                            return t;
                        });
                Future<String> future = executorService.submit(command);

                //printing the result
                System.out.println(future.get());
            } catch (ExecutionException | InterruptedException | RuntimeException e) {
                System.out.println(e.getMessage().replace("java.lang.Exception: ",""));
            }
        }
        sc.close();
    }
}
